library(caret)
install.packages(c("rpart", "rpart.plot", "RWeka"))
library(caret)
library(rpart)
library(rpart.plot)
library(RWeka)
install.packages("RWekajars")
install.packages("rJava")
install.packages("RWeka")
library(caret)
library(rpart)
library(rpart.plot)
library(RWeka)
setwd("~/nba/")
nba  <- read.csv("nba_stats.csv")
head(nba)
teamPer  <- read.csv("teamStats.csv")
head(teamPer)
nba$team  <- gsub(".*\\(|\\)","", nba$STATS)
nba  <- merge(nba, teamPer, by="team", all.x = TRUE)
nba$STATS  <- gsub("\\\n.*","", nba$STATS)
cor(nba[, c("PPG", "APG", "BPG", "SPG", "DRPG", "ORPG","TPG","custom")])
nba$custom  <- nba$APG * 1.1 + nba$ORPG * 1.2 + nba$DRPG + nba$PPG - nba$TPG + nba$winning
nba$custom  <- ifelse(is.na(nba$custom), nba$FPPG,  nba$custom)
cor(nba[, c("PPG", "APG", "BPG", "SPG", "DRPG", "ORPG","TPG","custom")])
plot(nba$PPG, nba$custom)
plot(nba$PPG, nba$APG)
nba$custom  <- nba$APG * 1.1 + nba$ORPG * 1.2 + nba$DRPG + nba$PPG + nba$TPG + nba$winning
nba$custom  <- ifelse(is.na(nba$custom), nba$FPPG,  nba$custom)
cor(nba[, c("PPG", "APG", "BPG", "SPG", "DRPG", "ORPG","TPG","custom")])
plot(nba$custom, nba$FPPG)
plot(nba$FPPM, nba$FPPG)
glmModel  <- train(FPPM ~ PPG + ORPG + DRPG + APG + BPG + SPG + TPG,
data = training, method="glm", preProcess="scale")
set.seed(999)
nba  <- nba[,-c(1,2,3,4,6,19,20,21)]
inTraining  <- createDataPartition(nba$FPPM, p = .75, list = FALSE)
training  <- nba[inTraining, ]; testing  <- nba[-inTraining,]
glmModel  <- train(FPPM ~ PPG + ORPG + DRPG + APG + BPG + SPG + TPG,
data = training, method="glm", preProcess="scale")
summary(glmModel)
glmModel  <- train(FPPM ~ . ,
data = training, method="glm", preProcess="scale")
summary(glmModel)
mpartModel  <- rpart(FPPM ~ . , data = training)
mpartPred  <- predict(mpartModel, newdata = testing)
summary(mpartModel)
rpart.plot(mpartModel, type =3, fallen.leaves = TRUE)
names(nba)
nba  <- read.csv("nba_stats.csv")
## Open Team %
teamPer  <- read.csv("teamStats.csv")
## Team Classification
nba$team  <- gsub(".*\\(|\\)","", nba$STATS)
## Merge Data
nba  <- merge(nba, teamPer, by="team", all.x = TRUE)
## Clean names
nba$STATS  <- gsub("\\\n.*","", nba$STATS)
## Custom Classification
nba$custom  <- nba$APG * 1.1 + nba$ORPG * 1.2 + nba$DRPG + nba$PPG + nba$TPG + nba$winning
nba$custom  <- ifelse(is.na(nba$custom), nba$FPPG,  nba$custom)
set.seed(999)
names(nba)
nba  <- nba[,-c(1,2,3,4,6,7,8,10,20,21,22,24,25,27)]
names(nba)
glmModel  <- train(FPPM ~ . ,
data = training, method="glm", preProcess="scale")
summary(glmModel)
names(nba)
inTraining  <- createDataPartition(nba$FPPM, p = .75, list = FALSE)
training  <- nba[inTraining, ]; testing  <- nba[-inTraining,]
glmModel  <- train(FPPM ~ . ,
data = training, method="glm", preProcess="scale")
summary(glmModel)
mpartModel  <- rpart(FPPM ~ . , data = training)
summary(mpartModel)
rpart.plot(mpartModel, type =3, fallen.leaves = TRUE)
m5pModel  <- M5P(FPPM ~ . , data = training)
library(RWeka)
library(caret)
library(rpart)
library(rpart.plot)
library(RWeka)
## Set working directory
setwd("~/nba/")
## Open csv
nba  <- read.csv("nba_stats.csv")
## Open Team %
teamPer  <- read.csv("teamStats.csv")
## Team Classification
nba$team  <- gsub(".*\\(|\\)","", nba$STATS)
## Merge Data
nba  <- merge(nba, teamPer, by="team", all.x = TRUE)
## Clean names
nba$STATS  <- gsub("\\\n.*","", nba$STATS)
## Custom Classification
nba$custom  <- nba$APG * 1.1 + nba$ORPG * 1.2 + nba$DRPG + nba$PPG + nba$TPG + nba$winning
nba$custom  <- ifelse(is.na(nba$custom), nba$FPPG,  nba$custom)
set.seed(666)
nbaPre <- nba[, -c(1,2,3,4,5,7,8,10,20,21,23,22,24,25)]
inTraining  <- createDataPartition(nbaPre$custom, p = .75, list = FALSE)
training  <- nbaPre[inTraining, ]; testing  <- nbaPre[-inTraining,]
m5pModel  <- M5P(custom ~ . , data = training)
m5pPred  <- predict(m5pModel, newdata = testing)
m5pModel
set.seed(999)
nba  <- nba[,-c(1,2,3,4,6,7,8,10,20,21,22,24,25,27)]
inTraining  <- createDataPartition(nba$FPPM, p = .75, list = FALSE)
training  <- nba[inTraining, ]; testing  <- nba[-inTraining,]
mpartModel  <- rpart(FPPM ~ . , data = training)
mpartPred  <- predict(mpartModel, newdata = testing)
summary(mpartModel)
rpart.plot(mpartModel, type =3, fallen.leaves = TRUE)
m5pModel  <- M5P(FPPM ~ . , data = training)
m5pPred  <- predict(m5pModel, newdata = testing)
summary(m5pModel)
plot(m5pModel)
install.packages("partykit")
plot(m5pModel)
rpart.plot(m5pModel, type =3, fallen.leaves = TRUE)
boostModel <- train(FPPM ~ ., data = training, method="gbm")
boostPred  <- predict(boostModel, newdata = testing)
summary(m5pModel)
m5pModel
boostPred  <- predict(boostModel, newdata = testing)
summary(predictGlm)
summary(mpartPred)
summary(testing$FPPM)
summary(boostPred)
summary(testing$FPPM)
summary(mpartPred)
summary(m5pPred)
summary(boostPred)
summary(glmModel)
predictGlm  <- predict(glmModel, newdata = testing)
rmse  <- mean(sqrt((testing$custom - predictGlm)^2), na.rm = TRUE)
summary(testing$custom)
glmModel  <- train(FPPM ~ . ,
data = training, method="glm", preProcess="scale")
summary(glmModel)
predictGlm  <- predict(glmModel, newdata = testing)
rmse  <- mean(sqrt((testing$FPPM - predictGlm)^2), na.rm = TRUE)
set.seed(999)
nba  <- nba[,-c(1,2,3,4,6,7,8,10,20,21,22,24,25,27)]
inTraining  <- createDataPartition(nba$FPPM, p = .75, list = FALSE)
training  <- nba[inTraining, ]; testing  <- nba[-inTraining,]
glmModel  <- train(FPPM ~ . ,
data = training, method="glm", preProcess="scale")
summary(glmModel)
## Set working directory
setwd("~/nba/")
## Open csv
nba  <- read.csv("nba_stats.csv")
## Open Team %
teamPer  <- read.csv("teamStats.csv")
## Team Classification
nba$team  <- gsub(".*\\(|\\)","", nba$STATS)
## Merge Data
nba  <- merge(nba, teamPer, by="team", all.x = TRUE)
## Clean names
nba$STATS  <- gsub("\\\n.*","", nba$STATS)
## Custom Classification
nba$custom  <- nba$APG * 1.1 + nba$ORPG * 1.2 + nba$DRPG + nba$PPG + nba$TPG + nba$winning
nba$custom  <- ifelse(is.na(nba$custom), nba$FPPG,  nba$custom)
set.seed(999)
nbaPred <- nba[,-c(1,2,3,4,6,7,8,10,20,21,22,24,25,27)]
inTraining  <- createDataPartition(nbaPred$FPPM, p = .75, list = FALSE)
training  <- nba[inTraining, ]; testing  <- nba[-inTraining,]
glmModel  <- train(FPPM ~ . ,
data = training, method="glm", preProcess="scale")
summary(glmModel)
set.seed(999)
nbaPred <- nba[,-c(1,2,3,4,6,7,8,10,20,21,22,24,25,27)]
inTraining  <- createDataPartition(nbaPred$FPPM, p = .75, list = FALSE)
training  <- nbaPred[inTraining, ]; testing  <- nbaPred[-inTraining,]
glmModel  <- train(FPPM ~ . ,
data = training, method="glm", preProcess="scale")
summary(glmModel)
predictGlm  <- predict(glmModel, newdata = testing)
mean(sqrt((testing$FPPM - predictGlm)^2), na.rm = TRUE)
## Set working directory
setwd("~/nba/")
## Open csv
nba  <- read.csv("nba_stats.csv")
## Open Team %
teamPer  <- read.csv("teamStats.csv")
## Team Classification
nba$team  <- gsub(".*\\(|\\)","", nba$STATS)
## Merge Data
nba  <- merge(nba, teamPer, by="team", all.x = TRUE)
## Clean names
nba$STATS  <- gsub("\\\n.*","", nba$STATS)
## Custom Classification
nba$custom  <- nba$APG * 1.1 + nba$ORPG * 1.2 + nba$DRPG + nba$PPG + nba$TPG + nba$winning
nba$custom  <- ifelse(is.na(nba$custom), nba$FPPG,  nba$custom)
## Set working directory
setwd("~/nba/")
## Open csv
nba  <- read.csv("nba_stats.csv")
## Open Team %
teamPer  <- read.csv("teamStats.csv")
## Team Classification
nba$team  <- gsub(".*\\(|\\)","", nba$STATS)
## Merge Data
nba  <- merge(nba, teamPer, by="team", all.x = TRUE)
## Clean names
nba$STATS  <- gsub("\\\n.*","", nba$STATS)
## Custom Classification
nba$custom  <- nba$APG * 1.1 + nba$ORPG * 1.2 + nba$DRPG + nba$PPG + nba$TPG + nba$winning
nba$custom  <- ifelse(is.na(nba$custom), nba$FPPG,  nba$custom)
set.seed(999)
nbaPred <- nba[,-c(1,2,3,4,6,7,8,10,20,21,22,24,25,27)]
inTraining  <- createDataPartition(nbaPred$FPPM, p = .75, list = FALSE)
training  <- nbaPred[inTraining, ]; testing  <- nbaPred[-inTraining,]
names(nbaPred)
glmModel  <- train(FPPM ~ . ,
data = training, method="glm", preProcess="scale")
summary(glmModel)
predictGlm  <- predict(glmModel, newdata = testing)
mean(sqrt((testing$FPPM - predictGlm)^2), na.rm = TRUE)
mpartModel  <- rpart(FPPM ~ . , data = training)
mpartPred  <- predict(mpartModel, newdata = testing)
summary(mpartModel)
rpart.plot(mpartModel, type =3, fallen.leaves = TRUE)
mpartPred - training$FPPM
str(mpartPred)
length(mpartPred)
length(training$FPPM) -
0
testing$FPPM - mpartPred
sqrt(mean(testing$FPPM - mpartPred)^2))
mean(sqrt(testing$FPPM - mpartPred)^2)
mean(sqrt((testing$FPPM - mpartPred)^2))
mean(sqrt((testing$FPPM - m5pPred)^2))
m5pModel  <- M5P(FPPM ~ . , data = training)
m5pPred  <- predict(m5pModel, newdata = testing)
mean(sqrt((testing$FPPM - m5pPred)^2))
m5pModel
mean(sqrt((testing$FPPM - boostModel)^2))
boostModel <- train(FPPM ~ ., data = training, method="gbm")
boostPred  <- predict(boostModel, newdata = testing)
mean(sqrt((testing$FPPM - boostModel)^2))
mean(sqrt((testing$FPPM - boostPred)^2))
mean(sqrt((testing$FPPM - m5pPred)^2))
mean(sqrt((testing$FPPM - mpartPred)^2))
if(require("party", quietly = TRUE)) plot(m1)
plot(m5pModel)
nba[ order(-nba[,27]), c(1,2,4,21,22,23,26,27)]
m5pModel
nba[ order(-nba[,25]), c(1,2,4,21,22,23,26,27)]
names(nba)
nba[ order(-nba[,23]), c(1,2,4,21,22,23,26,27)]
teste  <- nba$FPPG / nba$MPG
teste - nba$FPPM
round(teste - nba$FPPM, 2)
